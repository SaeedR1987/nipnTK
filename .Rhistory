devtools::use_data_raw()
library(devtools)
install.packages("devtools")
library(devtools)
devtools::use_data_raw()
devtools::use_data()
ls()
list.files(path = ".")
list.files(path = "data-raw/")
stringr
library(stringr)
install.packages("stringr")
?stringr
??stringr
library(stringr)
filenames <- list.files(path = "data-raw/")
str_detect(string = filenames, pattern = ".csv")
filenames <- list.files(path = "data-raw/")
subfiles <- str_detect(string = filenames, pattern = ".csv")
filenames[subfiles]
devtools::use_data(filenames[subfiles])
devtools::use_data(paste("data-raw/", filenames[subfiles], sep = "")
)
filenames <- list.files(path = "data-raw/")
subfiles <- str_detect(string = filenames, pattern = ".csv")
for(i in filenames[subfiles]) {
temp <- read.csv(paste("data-raw/", i, sep = ""))
devtools::use_data(temp)
}
?assign
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvfiles
csvfiles <- str_subset(string = filenames, pattern = ".csv")
str_replace(string = csvfiles, pattern = ".csv", "")
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvnames <- str_replace(string = csvfiles, pattern = ".csv", "")
for(i in filenames[subfiles]) {
assign(x = csvnames, value = read.csv(paste("data-raw/", i, sep = "")))
devtools::use_data(temp)
}
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvnames <- str_replace(string = csvfiles, pattern = ".csv", "")
for(i in csvfiles) {
assign(x = csvnames[1], value = read.csv(paste("data-raw/", i, sep = "")))
devtools::use_data(temp)
}
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvnames <- str_replace(string = csvfiles, pattern = ".csv", "")
for(i in csvfiles) {
assign(x = csvnames[i], value = read.csv(paste("data-raw/", i, sep = "")))
devtools::use_data(csvnames[i])
}
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvnames <- str_replace(string = csvfiles, pattern = ".csv", "")
for(i in csvnames) {
assign(x = i, value = read.csv(paste("data-raw/", i, ".csv", sep = "")))
devtools::use_data(i)
}
rm(filenames, csvfiles, csvnames)
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvnames <- str_replace(string = csvfiles, pattern = ".csv", "")
for(i in csvnames) {
assign(x = i, value = read.csv(paste("data-raw/", i, ".csv", sep = "")))
devtools::use_data(get(i))
}
rm(filenames, csvfiles, csvnames)
get(i)
?lapply
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvdir <- paste("data-raw/", csvfiles, sep = "")
lapply(csvdir, read.csv)
x <- lapply(csvdir, read.csv)
x
str(x)
x[[1]]
x[[2]]
names(x)
names(x) <- csvfiles
names(x)
filenames <- list.files(path = "data-raw/")
csvfiles <- str_subset(string = filenames, pattern = ".csv")
csvdir <- paste("data-raw/", csvfiles, sep = "")
csvnames <- str_replace(string = csvfiles, pattern = ".csv", "")
x <- lapply(csvdir, read.csv)
names(x) <- csvnames
x
names(x)
devtools::use_data(x[[1]], overwrite = TRUE)
y <- sapply(csvdir, read.csv)
y
str(y)
names(y)
names(y[1])
assign(names(y[1]), y[1])
devtools::use_data(names(y[1])
)
get(y[1])
ah.ex01 <- read.csv("data-raw/ah.ex01.csv")
ah.ex01 <- read.csv("data-raw/ah.ex01.csv")
devtools::use_data(ah.ex01)
as.ex01 <- read.csv("data-raw/as.ex01.csv")
devtools::use_data(ahs.ex01)
as.ex01 <- read.csv("data-raw/as.ex01.csv")
devtools::use_data(as.ex01)
as.ex02 <- read.csv("data-raw/as.ex02.csv")
devtools::use_data(as.ex02)
#
dist.ex01 <- read.csv("data-raw/dist.ex01.csv")
devtools::use_data(dist.ex01)
################################################################################
#
# Age heaping example data
#
ah.ex01 <- read.csv("data-raw/ah.ex01.csv")
devtools::use_data(ah.ex01)
#
# Age and sex distributions example data
#
as.ex01 <- read.csv("data-raw/as.ex01.csv")
devtools::use_data(as.ex01)
as.ex02 <- read.csv("data-raw/as.ex02.csv")
devtools::use_data(as.ex02)
#
# Distributions example data
#
dist.ex01 <- read.csv("data-raw/dist.ex01.csv")
devtools::use_data(dist.ex01)
#
# Digit preference example data
#
dp.ex01 <- read.csv("data-raw/dp.ex01.csv")
devtools::use_data(dp.ex01)
dp.ex02 <- read.csv("data-raw/dp.ex02.csv")
devtools::use_data(dp.ex02)
dp.ex03 <- read.csv("data-raw/dp.ex03.csv")
devtools::use_data(dp.ex03)
#
# Flagging outliers example data
#
flag.ex01 <- read.csv("data-raw/flag.ex01.csv")
devtools::use_data(flag.ex01)
flag.ex02 <- read.csv("data-raw/flag.ex02.csv")
devtools::use_data(flag.ex02)
flag.ex03 <- read.csv("data-raw/flag.ex03.csv")
devtools::use_data(flag.ex03)
#
# Ranges and legal values example data
#
rl.ex01 <- read.csv("data-raw/rl.ex01.csv")
devtools::use_data(rl.ex01)
#
# Scatterplots example data
#
sp.ex01 <- read.csv("data-raw/sp.ex01.csv")
devtools::use_data(sp.ex01)
sp.ex02 <- read.csv("data-raw/sp.ex02.csv")
devtools::use_data(sp.ex02)
View(ah.ex01)
names(ah.ex01)
paste("#' \item{\code{", names(ah.ex01), "}{}")
cat("#' \item{\code{", names(ah.ex01), "}{}")
cat("#' n\item{\code{", names(ah.ex01), "}{}")
cat("#' \n\item{\code{", names(ah.ex01), "}{}")
cat("#' \n\item{\code{", names(ah.ex01), "}{}")
cat("#' \\item{\code{", names(ah.ex01), "}{}")
cat("#' \\item{\\code{", names(ah.ex01), "}{}")
cat("#' \\item{\\code{", names(ah.ex01), "}{}", sep = "")
paste("#' \\item{\\code{", names(ah.ex01), "}{}", sep = "")
paste("#' \item{\code{", names(ah.ex01), "}{}", sep = "")
paste("#' \n\item{\n\code{", names(ah.ex01), "}{}", sep = "")
paste("#' \item{\code{", names(ah.ex01), "}{}", sep = "")
cat(paste("#' \\item{\\code{", names(ah.ex01), "}{}", sep = ""))
devtools::document()
devtools::document()
packrat::disable()
library(nipnTK)
devtools::use_readme_rmd()
names(dp.ex02)
library(nipnTK)
names(dp.ex02)
nrow(dp.ex02)
ncol(dp.ex02)
dp.ex02$muac
dp.ex02$oedema
head(as.ex02)
nrow(as.ex02)
nrow(as.ex01)
head(as.ex01)
head(dist.ex01)
nrow(dist.ex01)
ncol(dist.ex01)
head(dp.ex01)
ncol(dp.ex01)
nrow(dp.ex01)
###############################################################################
#
head(dp.ex03)
ncol(dp.ex03)
nrow(dp.ex03)
head(flag.ex01)
ncol(flag.ex01)
nrow(flag.ex01)
head(flag.ex02)
ncol(flag.ex02)
nrow(flag.ex02)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
head(flag.ex03)
ncol(flag.ex03)
nrow(flag.ex03)
head(rl.ex01)
ncol(rl.ex01)
nrow(rl.ex01)
head(sp.ex01)
ncol(sp.ex01)
nrow(sp.ex01)
head(sp.ex02)
ncol(sp.ex02)
nrow(sp.ex02)
devtools::document()
ageChildren(dp.ex02$age, u5mr = 1)
plot(ageChildren(dp.ex02$age, u5mr = 1))
ac <- ageChildren(dp.ex02$age, u5mr = 1)
print.ageChildren(ac)
ac
test <- plot.ageChildren(ac)
class(test)
test
plot.ageChildren(ac)
plot.ageChildren(ac)
plot.ageChildren(ac)
devtools::document()
svy <- dp.ex02
ah12 <- ageHeaping(svy$age)
ah12
################################################################################
#
plot.ageHeaping <- function(x, main = "",  xlab = "Remainder", ylab = "Frequency", cex = 0.75)
{
main <- ifelse(main == "", names(dimnames(x$tab)), main)
plot(x$tab, main = main, xlab = xlab, ylab = ylab, frame.plot = FALSE, lwd = 3)
abline(h = sum(x$tab) / length(x$tab), lty = 3)
boxText(as.numeric(names(x$tab)), rep(max(x$tab) * 0.1, length(x$tab)), paste(sprintf(fmt = "%3.1f", x$pct), "%", sep = ""), cex = cex, pad = FALSE)
}
plot.ageHeaping(ah12)
plot(ah12)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
################################################################################
#
print.ageRatioTest <- function(x)
{
cat("\n\t\tAge Ratio Test (children\'s data)\n\n", sep = "")
cat("                    Expected age ratio = ", formatC(x$expectedR, format = "f", width = 6), "\n", sep = "")
cat("Expected proportion aged 6 - 29 months = ", formatC(x$expectedP, format = "f", width = 6), "\n\n", sep = "")
cat("                    Observed age ratio = ", formatC(x$observedR, format = "f", width = 6), "\n", sep = "")
cat("Observed proportion aged 6 - 29 months = ", formatC(x$observedP, format = "f", width = 6), "\n\n", sep = "")
cat("X-squared = ", formatC(x$X2, format = "f", width = 6), ", p = ", formatC(x$p, format = "f", width = 6), "\n\n", sep = "")
}
devtools::document()
#' @param x Object resulting from applying the \code{digitPreference()} function.
#' @param main Title of plot
#' @param xlab \code{x-axis} label; default is "Final Digit"
#' @param ylab \code{y-axis} label; default is "Frequency"
#' @param cex Character expansion; default is 0.75
#' @return Plotted output of \code{digitPreference()} function comparing the
#' frequencies of the various final digits
#'
#
#####################
plot.digitPreference <- function(x, main = "",  xlab = "Final Digit", ylab = "Frequency", cex = 0.75)
{
main <- ifelse(main == "", names(dimnames(x$tab)), main)
main <- paste(main, " (DPS = ", x$dps, " : ", x$dpsClass, ")", sep = "")
plot(x$tab, main = main, xlab = xlab, ylab = ylab, frame.plot = FALSE, lwd = 3)
abline(h = sum(x$tab) / length(x$tab), lty = 3)
boxText(as.numeric(names(x$tab)), rep(max(x$tab) * 0.2, length(x$tab)), paste(sprintf(fmt = "%3.1f", x$pct), "%", sep = ""), cex = cex, pad = FALSE)
boxText(sum(par("usr")[1:2]) / 2, max(x$tab) * 0.1,"(numbers on bars represent the proportions in each class)", cex = cex, pad = TRUE)
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#'
#' \code{print()} helper function for \code{sexRatioTest()} function
#'
#' @param x Output resulting from applying the \code{sexRatioTest()} function
#' @return Printed output of \code{sexRatioTest()} function
#' @examples
#' #
#'
#
#######################
print.sexRatioTest <- function(x)
{
cat("\n\tSex Ratio Test\n\n", sep = "")
cat("Expected proportion male = ", formatC(x$eM, format = "f", width = 6), "\n", sep = "")
cat("Observed proportion male = ", formatC(x$pM, format = "f", width = 6), "\n", sep = "")
cat("X-squared = ", formatC(x$X2, format = "f", width = 6), ", p = ", formatC(x$p, format = "f", width = 6), "\n\n", sep = "")
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(nipnTK)
library(nipnTK)
devtools::document()
devtools::load_all(".")
library(nipnTK)
library(nipnTK)
devtools::use_package("bbw")
library(nipnTK)
devtools::document()
library(nipnTK)
library(nipnTK)
devtools::document()
devtools::document()
library(nipnTK)
devtools::missing_s3()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(nipnTK)
class(print.ageChildren())
registerS3method("print","ageChildren","print.ageChildren", envir=getNamespace("nipnTK"))
library(nipnTK)
devtools::document()
library(nipnTK)
devtools::document()
library(nipnTK)
?S3Methods
?S3Method
?S3Methods
S3method("print", "ageChildren")
S3method(print, ageChildren)
?S3Method
??S3Method
UseMethod(print, ageChildren)
UseMethod("print", "ageChildren")
?registerS3method
registerS3method("print","ageChildren","print.ageChildren", envir=getNamespace("nipnTK"))
devtools::document()
registerS3method("plot","ageChildren","plot.ageChildren", envir=getNamespace("nipnTK"))
registerS3method("print","ageHeaping","plot.ageHeaping", envir=getNamespace("nipnTK"))
registerS3method("print","ageChildren","print.ageChildren", envir=getNamespace("nipnTK"))
registerS3method("plot","ageChildren","plot.ageChildren", envir=getNamespace("nipnTK"))
registerS3method("print","ageHeaping","print.ageHeaping", envir=getNamespace("nipnTK"))
registerS3method("print","ageChildren","print.ageChildren", envir=getNamespace("nipnTK"))
registerS3method("plot","ageChildren","plot.ageChildren", envir=getNamespace("nipnTK"))
registerS3method("print","ageHeaping","print.ageHeaping", envir=getNamespace("nipnTK"))
registerS3method("plot","ageHeaping","plot.ageHeaping", envir=getNamespace("nipnTK"))
library(nipnTK)
devtools::document()
devtools::document()
devtools::document()
?export
devtools::document()
devtools::document()
devtools::document()
library(nipnTK)
devtools::document()
library(nipnTK)
library(nipnTK)
library(nipnTK)
devtools::document()
?exportMethods
??exportMethods
??exportMethods
library(nipnTK)
devtools::document()
library(nipnTK)
head(dp.ex02)
devtools::document()
library(nipnTK)
library(nipnTK)
library(nipnTK)
devtools::document()
library(nipnTK)
library(nipnTK)
devtools::document()
library(nipnTK)
library(nipnTK)
devtools::document()
svy <- flag.ex01
head(svy)
devtools::document()
library(nipnTK)
library(nipnTK)
devtools::document()
library(nipnTK)
devtools::document()
devtools::document()
library(nipnTK)
devtools::document()
devtools::document()
library(nipnTK)
devtools::document()
devtools::document()
devtools::document()
library(nipnTK)
devtools::document()
library(nipnTK)
devtools::document()
library(nipnTK)
devtools::missing_s3()
devtools::document()
devtools::missing_s3()
library(nipnTK)
devtools::document()
library(nipnTK)
library(nipnTK)
devtools::document()
library(nipnTK)
svy <- dp.ex02
ac <- ageChildren(svy$age, u5mr = 1)
plot(ac)
plot.ageChildren(ac)
plot(ac)
print(ac)
print.ageChildren(ac)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(nipnTK)
devtools::document()
library(nipnTK)
svy <- dp.ex02
head(svy)
devtools::document()
library(nipnTK)
devtools::use_travis()
devtools::use_appveyor()
svy <- r1.ex01.csv
summary(svy$muac)
boxplot(svy$muac, horizontal = TRUE, xlab = "MUAC (mm)", frame.plot = FALSE)
svy[outliersUV(svy$muac), ]
library(nipnTK)
svy <- r1.ex01.csv
summary(svy$muac)
boxplot(svy$muac, horizontal = TRUE, xlab = "MUAC (mm)", frame.plot = FALSE)
svy[outliersUV(svy$muac), ]
library(nipnTK)
cars
library(nipnTK)
rl.ex01
